org: dalyleide
app: serverless-final-project
service:
  name: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'sa-east-1'}

  environment:
    TODO_TABLE: Todo-${self:provider.stage}
    TODO_ID_INDEX: ImageIdIndex
    IMAGES_S3_BUCKET: serverless-final-project-${self:provider.stage}
  tracing: 
    lambda: true
    apiGatway: true
  iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:PutItem
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:Query
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}/index/${self:provider.environment.TODO_ID_INDEX}
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*

custom:
  topicName: imagesTopic-${self:provider.stage}
  documentation:
    api:
      info:
        version: v1.0.0
        title: Serverless Final Project API
        description: Serverless application for images sharing
    models:
      - name: TodoRequest
        contentType: application/json
        schema: ${file(models/create-todo-request.json)}
      - name: TodoUpdateRequest
        contentType: application/json
        schema: ${file(models/update-todo-request.json)}

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}
      - Effect: Allow 
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - "*"

  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          request:
            schema:
              application/json: ${file(src/models/create-todo-model.json)}
          # documentation:
          #   summary: Create a new todo
          #   description: Create a new todo
          #   requestModels:
          #     'application/json': TodoRequest
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}
      - Effect: Allow 
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - "*"

  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          request:
            schema:
              application/json: ${file(src/models/update-todo-model.json)}
          # documentation:
          #   summary: Update a todo
          #   description: Update a todo
          #   requestModels:
          #     'application/json': TodoUpdateRequest
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}
      - Effect: Allow 
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - "*"

  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}
      - Effect: Allow 
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - "*"

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
          - s3:'*'
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}
      - Effect: Allow 
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - "*"


resources:
  Resources:
  
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    RequestBodyValidator: 
      Type: AWS::ApiGateway::RequestValidator
      Properties: 
        Name: 'request-body-validator'
        RestApiId: 
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: true

    TodoDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: todoId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: todoId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        TableName: ${self:provider.environment.TODO_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TODO_ID_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    AttachmentsBucket:
          Type: AWS::S3::Bucket
          Properties:
            BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
            CorsConfiguration:
              CorsRules:
                -
                  AllowedOrigins:
                    - '*'
                  AllowedHeaders:
                    - '*'
                  AllowedMethods:
                    - GET
                    - PUT
                    - POST
                    - DELETE
                    - HEAD
                  MaxAge: 3000
    BucketPolicy:
          Type: AWS::S3::BucketPolicy
          Properties:
            PolicyDocument:
              Id: MyPolicy
              Version: "2012-10-17"
              Statement:
                - Sid: PublicReadForGetBucketObjects
                  Effect: Allow
                  Principal: '*'
                  Action: 
                    - s3:GetObject
                    - s3:PutObject
                  Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
            Bucket: !Ref AttachmentsBucket